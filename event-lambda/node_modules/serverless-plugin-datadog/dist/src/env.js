"use strict";
/*
 * Unless explicitly stated otherwise all files in this repository are licensed
 * under the Apache License Version 2.0.
 *
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2021 Datadog, Inc.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasWebpackPlugin = exports.forceExcludeDepsFromWebpack = exports.getConfig = exports.setEnvConfiguration = exports.defaultConfiguration = void 0;
const webpackPluginName = "serverless-webpack";
const apiKeyEnvVar = "DD_API_KEY";
const apiKeyKMSEnvVar = "DD_KMS_API_KEY";
const siteURLEnvVar = "DD_SITE";
const logLevelEnvVar = "DD_LOG_LEVEL";
const logForwardingEnvVar = "DD_FLUSH_TO_LOG";
const ddTracingEnabledEnvVar = "DD_TRACE_ENABLED";
const logInjectionEnvVar = "DD_LOGS_INJECTION";
const ddLogsEnabledEnvVar = "DD_SERVERLESS_LOGS_ENABLED";
exports.defaultConfiguration = {
    addLayers: true,
    flushMetricsToLogs: true,
    logLevel: undefined,
    site: "datadoghq.com",
    enableXrayTracing: false,
    enableDDTracing: true,
    addExtension: false,
    enableTags: true,
    injectLogContext: true,
    exclude: [],
    integrationTesting: false,
    subscribeToApiGatewayLogs: true,
    subscribeToHttpApiLogs: true,
    subscribeToWebsocketLogs: true,
    enableDDLogs: true,
};
function setEnvConfiguration(config, handlers) {
    handlers.forEach(({ handler }) => {
        var _a;
        (_a = handler.environment) !== null && _a !== void 0 ? _a : (handler.environment = {});
        const environment = handler.environment;
        if (config.apiKey !== undefined && environment[apiKeyEnvVar] === undefined) {
            environment[apiKeyEnvVar] = config.apiKey;
        }
        if (config.apiKMSKey !== undefined && environment[apiKeyKMSEnvVar] === undefined) {
            environment[apiKeyKMSEnvVar] = config.apiKMSKey;
        }
        if (environment[siteURLEnvVar] === undefined) {
            environment[siteURLEnvVar] = config.site;
        }
        if (environment[logLevelEnvVar] === undefined) {
            environment[logLevelEnvVar] = config.logLevel;
        }
        if (environment[logForwardingEnvVar] === undefined && config.addExtension === false) {
            environment[logForwardingEnvVar] = config.flushMetricsToLogs;
        }
        if (config.enableDDTracing !== undefined && environment[ddTracingEnabledEnvVar] === undefined) {
            environment[ddTracingEnabledEnvVar] = config.enableDDTracing;
        }
        if (config.injectLogContext !== undefined && environment[logInjectionEnvVar] === undefined) {
            environment[logInjectionEnvVar] = config.injectLogContext;
        }
        if (config.enableDDLogs !== undefined && environment[ddLogsEnabledEnvVar] === undefined) {
            environment[ddLogsEnabledEnvVar] = config.enableDDLogs;
        }
    });
}
exports.setEnvConfiguration = setEnvConfiguration;
function getConfig(service) {
    let custom = service.custom;
    if (custom === undefined) {
        custom = {};
    }
    let datadog = custom.datadog;
    if (datadog === undefined) {
        datadog = {};
    }
    return Object.assign(Object.assign({}, exports.defaultConfiguration), datadog);
}
exports.getConfig = getConfig;
function forceExcludeDepsFromWebpack(service) {
    const includeModules = getPropertyFromPath(service, ["custom", "webpack", "includeModules"]);
    if (includeModules === undefined) {
        return;
    }
    let forceExclude = includeModules.forceExclude;
    if (forceExclude === undefined) {
        forceExclude = [];
        includeModules.forceExclude = forceExclude;
    }
    if (!forceExclude.includes("datadog-lambda-js")) {
        forceExclude.push("datadog-lambda-js");
    }
    if (!forceExclude.includes("dd-trace")) {
        forceExclude.push("dd-trace");
    }
}
exports.forceExcludeDepsFromWebpack = forceExcludeDepsFromWebpack;
function getPropertyFromPath(obj, path) {
    for (const part of path) {
        let prop = obj[part];
        if (prop === undefined || prop === true) {
            prop = {};
            obj[part] = prop;
        }
        if (prop === false) {
            return;
        }
        obj = prop;
    }
    return obj;
}
function hasWebpackPlugin(service) {
    const plugins = service.plugins;
    if (plugins === undefined) {
        return false;
    }
    if (Array.isArray(plugins)) {
        // We have a normal plugin array
        return plugins.find((plugin) => plugin === webpackPluginName) !== undefined;
    }
    // We have an enhanced plugins object
    const modules = service.plugins.modules;
    if (modules === undefined) {
        return false;
    }
    return modules.find((plugin) => plugin === webpackPluginName) !== undefined;
}
exports.hasWebpackPlugin = hasWebpackPlugin;
//# sourceMappingURL=env.js.map